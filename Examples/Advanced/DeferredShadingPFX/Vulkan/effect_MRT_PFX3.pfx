<pfx version="01.00.00.00" description="DeferredShading Effects. Multiple Render Target version." copyright="Imagination Technologies">
	<texture name="GBufferAlbedo" format="r8g8b8a8_unorm" />
	<texture name="GBufferNormal" format="r16g16b16a16_sfloat" />
	<texture name="GBufferDepth" format="r32_sfloat" />
		
	<effect name="RenderObject">
		<pass>
		  
		  <!--      				GBUFFER PASS 					
		    Gbuffer pass will simply render the scene in to the gbuffer attachments albedo, normal and depth which will the be
		    used in following subpasses.
		  -->
		  <subpass name="GBufferSubPass" target0="GBufferAlbedo" target1="GBufferNormal" target2="GBufferDepth">
			<pipeline name="RenderGBuffer">
				<condition type="requiresUniformSemantic" name="NORMALMAP"/>
			</pipeline>
			<pipeline name="RenderGBufferFloor"/>
		  </subpass>

		  <!--      				RENDER LIGHT PASS 			
 			A full-screen quad that will apply any global (ambient/directional) lighting disable the depth write as we do not want to modify the depth buffer while rendering directional lights.
		    We read from the previous sub pass outputs, albedo, normal and depth and draw a full screen quad with the albdeo
		  -->
 		  <subpass name="RenderLightingSubpass" target0="default" input0="GBufferAlbedo" input1="GBufferNormal" input2="GBufferDepth" usesDepthStencil="true">
			<subpassgroup name="RenderDirectionalLightGroup">
				<pipeline name="RenderDirectionalLight">
					<condition type="requiresUniformSemantic" name="DIR_LIGHT"/>
				</pipeline>
			</subpassgroup>


			 <!--      				POINT LIGHT PASS 1			
			In this pass we don't write any thing to the onscreen, instead we write in to the stencil for each point lights.
			 -->
			<subpassgroup name="RenderPointLightStep1">
				<pipeline name="PipeRenderPointLightStep1">
					<condition type="requiresUniformSemantic" name="POINT_LIGHT"/>
				</pipeline>
			</subpassgroup>
			
			<!--      				POINT LIGHT PASS 2 	
			Actually light the pixels touched by a point light. The back faces of the light volumes			
			-->			
			<subpassgroup name="RenderPointLightStep2">
				<pipeline name="PipeRenderPointLightStep2">
					<condition type="requiresUniformSemantic" name="POINT_LIGHT"/>
				</pipeline>
			</subpassgroup>



			<!--      				POINT LIGHT PASS 3 												
				Draw the point light sources.				
			-->	
			<subpassgroup name="RenderPointLightStep3">
				<pipeline name="PipeRenderPointLightStep3">
					<condition type="requiresUniformSemantic" name="POINT_LIGHT"/>
				</pipeline>
			</subpassgroup>
			
		  </subpass>
		</pass>
	</effect>

<!-- 											
============================================================================
								PIPELINES BUFFERS 											
============================================================================
-->

	<buffer name="GBufferPerFramePerModelBuffer" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="MODELVIEWPROJECTIONMATRIX" dataType="mat4x4"/>
		<entry semantic="MODELVIEWMATRIX" dataType="mat4x4"/>
		<entry semantic="MODELWORLDITMATRIX" dataType="mat4x4"/>
	</buffer>

	<buffer name="GBufferStaticPerScene" layout="STD140" scope="model" multibuffering="false">
		<entry semantic="FARCLIPDIST" dataType="float"/>
	</buffer>

	<buffer name="GBufferStaticPerMaterial" layout="STD140" scope="node" multibuffering="false">
		<entry semantic="SPECULARSTRENGTH" dataType="float"/>
		<entry semantic="DIFFUSECOLOUR" dataType="vec4"/>
	</buffer>

	<buffer name="RenderPointLightStep1Dynamic" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="PROXYMODELVIEWPROJECTIONMATRIX" dataType="mat4x4"/>
	</buffer>

	<buffer name="RenderPointLightStep2DynamicVert" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="PROXYMODELVIEWPROJECTIONMATRIX" dataType="mat4x4"/>
		<entry semantic="PROXYMODELVIEWMATRIX" dataType="mat4x4"/>
	</buffer>

	<buffer name="RenderPointLightStep2DynamicFrag" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="PROXYVIEWPOSITION" dataType="vec4"/>
	</buffer>

	<buffer name="RenderPointLightStep2StaticFrag" layout="STD140" scope="node" multibuffering="false">
		<entry semantic="LIGHTINTENSITY" dataType="vec4"/>
	</buffer>

	<buffer name="RenderPointLightStep2StaticScene" layout="STD140" scope="model" multibuffering="false">
		<entry semantic="FARCLIPDIST" dataType="float"/>
	</buffer>

	<buffer name="RenderPointLightStep3DynamicPointLight" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="MODELVIEWPROJECTIONMATRIX" dataType="mat4x4"/>
	</buffer>
	<buffer name="RenderPointLightStep3StaticPointLight" layout="STD140" scope="node" multibuffering="false">
		<entry semantic="LIGHTCOLOR" dataType="vec4"/>
	</buffer>
	<buffer name="RenderDirStaticDirLight" layout="STD140" scope="node" multibuffering="false">
		<entry semantic="LIGHTINTENSITY" dataType="vec4"/>
	</buffer>
	<buffer name="RenderDirDynamicPerDirLight" layout="STD140" scope="node" multibuffering="true">
		<entry semantic="VIEWDIRECTION" dataType="vec4"/>
	</buffer>


<!-- 											
============================================================================
								PIPELINES 											
============================================================================
-->

	<pipeline name="RenderGBuffer">
		<blending srcColor="ONE" srcAlpha="" dstAlpha="" dstColor="" blendOpColor="" blendOpAlpha=""/>
		<stencil enabled="true" ref="0xFF" />
		<depthstencil depthTest="true" func="less" stencilWriteMask="0xFF" stencilReference="1" stencilOpDepthPass="replace" stencilFunc="always" stencilTest="true"/>
		<rasterization faceCulling="back"/>

		<attribute variable="inVertex" semantic="POSITION" dataType="vec3" location="0" vboBinding="0"/>
		<attribute variable="inNormal" semantic="NORMAL" dataType="vec3" location="1" vboBinding="0"/>
		<attribute variable="inTexCoord" semantic="UV0" dataType="vec2" location="2" vboBinding="0"/>
		<attribute variable="inTangent" semantic="TANGENT" dataType="vec3" location="3" vboBinding="0"/>

		<buffer set="0" binding="0"  name="GBufferStaticPerScene" type="Uniform" apiVersion="VULKAN"/>
		<buffer set="1" binding="0"  name="GBufferStaticPerMaterial" type="UniformDynamic" apiVersion="VULKAN"/>		
		<buffer set="1" binding="1"  name="GBufferPerFramePerModelBuffer" type="UniformDynamic" apiVersion="VULKAN"/>

		<texture set="1" binding="2" variable="sTexture" semantic="DIFFUSEMAP"/>
		<texture set="1" binding="3" variable="sBumpMap" semantic="NORMALMAP" />
		
		<shader name="GBufferVertexShader"/>
		<shader name="GBufferFragmentShader"/>
	</pipeline>




<!-- 					RenderGBufferFloor Pipeline					-->
	<pipeline name="RenderGBufferFloor">
		<blending srcColor="ONE" srcAlpha="" dstAlpha="" dstColor="" blendOpColor="" blendOpAlpha=""/>
		<stencil enabled="true" ref="0xFF" />
		<depthstencil depthTest="true" func="less" stencilWriteMask="0xFF" stencilReference="1" stencilOpDepthPass="replace" stencilFunc="always" stencilTest="true"/>
	
		<rasterization faceCulling="back"/>

		<attribute variable="inVertex" semantic="POSITION" dataType="vec3" location="0" vboBinding="0"/>
		<attribute variable="inNormal" semantic="NORMAL" dataType="vec3" location="1" vboBinding="0"/>
		<attribute variable="inTexCoord" semantic="UV0" dataType="vec2" location="2" vboBinding="0"/>

		<buffer set="0" binding="0"  name="GBufferStaticPerScene" type="Uniform" apiVersion="VULKAN"/>
		<buffer set="1" binding="0"  name="GBufferStaticPerMaterial" type="UniformDynamic" apiVersion="VULKAN"/>		
		<buffer set="1" binding="1"  name="GBufferPerFramePerModelBuffer" type="UniformDynamic" apiVersion="VULKAN"/>

		<texture set="1" binding="2" variable="sTexture" semantic="DIFFUSEMAP"/>
		
		<shader name="GBufferFloorVertexShader"/>
		<shader name="GBufferFloorFragmentShader"/>
	</pipeline>


	<!-- 			 RenderDirectionalLight			-->

	<pipeline name="RenderDirectionalLight">
		<buffer set="0" binding="0"  name="RenderDirStaticDirLight" type="Uniform" apiVersion="VULKAN"/>
		<buffer set="0" binding="1"  name="RenderDirDynamicPerDirLight" type="Uniform" apiVersion="VULKAN"/>

		<depthstencil depthTest="false" depthWrite="false" stencilTest="true" stencilTest="true" stencilOpDepthPass="replace" stencilReference="1" stencilFunc="equal" stencilWriteMask="0x00"/>
		<rasterization faceCulling="back"/>
		<blending enabled="false"/>

		<inputattachment targetIndex="0" set="0" binding="2"/>
		<inputattachment targetIndex="1" set="0" binding="3"/>
		<inputattachment targetIndex="2" set="0" binding="4"/>
		
		<shader name="AttributelessVertexShader"/>
		<shader name="DirectionalLightFragmentShader"/>
	</pipeline>


<!-- 					
						RenderPointLightStencil					

	POINT LIGHTS GEOMETRY STENCIL PASS
	Render the front face of each light volume
	Z function is set as Less/Equal
	Z test passes will leave the stencil as 0 i.e. the front of the light is infront of all geometry in the current pixel This is the condition we want for determining whether the geometry can be affected by the point lights
	Z test fails will increment the stencil to 1. i.e. the front of the light is behind all of the geometry in the current pixel
    Under this condition the current pixel cannot be affected by the current point light as the geometry is infront of the front of the point light
-->
	<pipeline name="PipeRenderPointLightStep1">
		<depthstencil depthTest="true" depthWrite="false" depthFunc="lequal" stencilReference="0" stencilCompareMask="255" stencilTest="true" stencilOpStencilFail="keep" stencilOpDepthPass="keep" stencilOpDepthFailFront="incrementWrap" stencilOpDepthFailBack="keep"/>
		<blending writeMask="none"/>
		<rasterization faceCulling="back"/>
		<attribute variable="inVertex" semantic="POSITION" dataType="vec3" location="0" vboBinding="0"/>

		<buffer set="0" binding="0"  name="RenderPointLightStep1Dynamic" type="UniformDynamic" apiVersion="VULKAN"/>
		
		<shader name="PointLightPass1VertexShader"/>
		<shader name="PointLightPass1FragmentShader"/>
	</pipeline>


	<!-- 					
							RenderPointLightPass2Pipeline					

	POINT LIGHTS PROXIES - Actually light the pixels touched by a point light.
	Render the back faces of the light volumes
	Z function is set as Greater/Equal
	Z test passes signify that there is geometry infront of the back face of the light volume i.e. for the current pixel there is some geometry infront of the back face of the light volume
	Stencil function is Equal i.e. the stencil renference is set to 0
	Stencil passes signify that for the current pixel there exists a front face of a light volume infront of the current geometry
	Point light calculations occur every time a pixel passes both the stencil AND Z test
	-->
	<pipeline name="PipeRenderPointLightStep2">
		<depthstencil depthTest="true" depthWrite="false" depthFunc="gequal" stencilCompareMask="255" stencilFunc="always" stencilTest="true" stencilReference="0"/>
		<rasterization faceCulling="front"/>
		<blending srcColorFactor="one" srcAlphaFactor="one" dstColorFactor="one" dstAlphaFactor="one" enabled="true"/>
		<attribute variable="inVertex" semantic="POSITION" dataType="vec3" location="0" vboBinding="0"/>

		<inputattachment targetIndex="0" set="2" binding="0"/>
		<inputattachment targetIndex="1" set="2" binding="1"/>
		<inputattachment targetIndex="2" set="2" binding="2"/>
		
		<buffer set="0" binding="0"  name="RenderPointLightStep2StaticScene" type="Uniform" apiVersion="VULKAN"/>		
		<buffer set="1" binding="0"  name="RenderPointLightStep2StaticFrag" type="UniformDynamic" apiVersion="VULKAN"/>
		<buffer set="1" binding="1"  name="RenderPointLightStep2DynamicFrag" type="UniformDynamic" apiVersion="VULKAN"/>
		<buffer set="1" binding="2"  name="RenderPointLightStep2DynamicVert" type="UniformDynamic" apiVersion="VULKAN"/>
		
		<shader name="PointLightStep2VertexShader"/>
		<shader name="PointLightStep2FragmentShader"/>
	</pipeline>
	

	<!-- 					
							RenderPointLightPass3Pipeline					
	POINT LIGHTS SOURCE - Render the point light source	
	-->
	<pipeline name="PipeRenderPointLightStep3">
		<depthstencil depthTest="true" depthWrite="true" depthFunc="lequal" stencilTest="false"/>
		<rasterization faceCulling="back"/>
		<blending srcColorFactor="one" srcAlphaFactor="one" dstColorFactor="one" dstAlphaFactor="one" enabled="true"/>
		<attribute variable="inVertex" semantic="POSITION" dataType="vec3" location="0" vboBinding="0"/>
		
		<buffer set="0" binding="0"  name="RenderPointLightStep3StaticPointLight" type="UniformDynamic" apiVersion="VULKAN"/>		
		<buffer set="1" binding="0"  name="RenderPointLightStep3DynamicPointLight" type="UniformDynamic" apiVersion="VULKAN"/>
		<attribute variable="inVertex" semantic="POSITION" dataType="vec3" location="0" vboBinding="0"/>
		
		<shader name="PointLightStep3VertexShader"/>
		<shader name="PointLightStep3FragmentShader"/>
	</pipeline>

<!-- 											
============================================================================
								SHADERS 											
============================================================================
-->

	<shader type="vertex" name="AttributelessVertexShader">
		<file path="AttributelessVertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="fragment" name="DirectionalLightFragmentShader">
		<file path="DirectionalLightFragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="vertex" name="GBufferFloorVertexShader">
		<file path="GBufferFloorVertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="fragment" name="GBufferFloorFragmentShader">
		<file path="GBufferFloorFragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="vertex" name="GBufferVertexShader">
		<file path="GBufferVertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="fragment" name="GBufferFragmentShader">
		<file path="GBufferFragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="vertex" name="PointLightPass1VertexShader">
		<file path="PointLightPass1VertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="fragment" name="PointLightPass1FragmentShader">
		<file path="PointLightPass1FragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="vertex" name="PointLightStep2VertexShader">
		<file path="PointLightPass2VertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="fragment" name="PointLightStep2FragmentShader">
		<file path="PointLightPass2FragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="vertex" name="PointLightStep3VertexShader">
		<file path="PointLightPass3VertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>                                                            
	<shader type="fragment" name="PointLightStep3FragmentShader">
		<file path="PointLightPass3FragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="vertex" name="PointLightStencilVertexShader">
		<file path="PointLightStencilVertexShader.vsh.spv" apiVersion="VULKAN"/>
	</shader>
	<shader type="fragment" name="PointLightStencilFragmentShader">
		<file path="PointLightStencilFragmentShader.fsh.spv" apiVersion="VULKAN"/>
	</shader>
</pfx>
