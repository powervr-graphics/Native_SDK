apply plugin: 'com.android.application'

def hasSigningDefined = project.hasProperty('KEYSTORE_FILE') &&  project.hasProperty('KEYSTORE_PASSWORD') &&  project.hasProperty('KEY_ALIAS') && project.hasProperty('KEY_PASSWORD')

android {
	compileSdkVersion 26
	defaultConfig {
		applicationId "com.powervr.OpenGLESHelloAPI"
		minSdkVersion 16
		targetSdkVersion 24
		externalNativeBuild {
			cmake {
				cppFlags "-fexceptions"
				arguments "-DANDROID_STL=c++_static"
			}
		}
		ndk
		{
			abiFilters "$ANDROID_ABI".replace(" ", "").split(",")
		}
	}
	if (!project.hasProperty('NOSIGN') && hasSigningDefined) {
		signingConfigs {
			release {
				storeFile file(project['KEYSTORE_FILE'])
				storePassword project['KEYSTORE_PASSWORD']
				keyAlias project['KEY_ALIAS']
				keyPassword project['KEY_PASSWORD']
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			zipAlignEnabled true
			if (!project.hasProperty('NOSIGN') && hasSigningDefined) {
				signingConfig signingConfigs.release
			}
		}
	}
	externalNativeBuild {
		cmake {
			path "../CMakeLists.txt"
		}
	}
	
	//Runs before ndk building tasks
	task copyIcons(type: Copy) {
		from file("${project.projectDir}/../../../../res/Android/OpenGLES")
		into sourceSets.main.res.srcDirs[0]
		fileMode = 0664
	}
	preBuild.dependsOn copyIcons
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
}

buildscript {

	repositories {
		google()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:3.3.0-rc03'
	}
}

task checkReleaseSigning() {
	doLast{
		if (!hasSigningDefined && !project.hasProperty('NOSIGN')) {
			throw new InvalidUserDataException("*** ERROR *** No signing parameters and no 'NOSIGN' parameter for *Release* build *** ERROR ***\n"+
	"You must pass the parameters 'KEYSTORE_FILE', 'KEYSTORE_PASSWORD', 'KEY_ALIAS' and 'KEY_PASSWORD', or 'NOSIGN'.\n"+
	"These parameters can be passed several ways:\n" +
	" - Via command line ('-PRELEASE_STORE_FILE=myfile.jks....'), \n" +
	" - Defined locally in the build.gradle or settings.gradle (ext['KEYSTORE_FILE'] ='myfile.jks'. \n"+
	" - Defined globally in a gradle.properties file (ensure you have the GRADLE_USER_HOME variable set) : (KEYSTORE_FILE=myfile.jks etc.).\n"+
	'Otherwise, execute a *Debug* build, or pass the parameter NOSIGN. Otherwise, hardcode or disable signing completely by changing/removing the \'signingConfigs\' section and the line \'signingConfig signingConfigs.release\' from the \'buildTypes { release { ... } }\' section.');
		}
	}
}

def binOutput = hasProperty('BUILD_ENTIRE_SDK') ? '../../../../build-android/bin' : 'bin'

//Copy outputs to the bin/ folder
task copyToBinDebug(type: Copy) {
	from 'build/outputs/apk/debug'
	into "${binOutput}"
	include('*.apk')
}
task copyToBinRelease(type: Copy) {
	from 'build/outputs/apk/release'
	into "${binOutput}"
	include('*.apk')
	rename('(.*)-release.apk', '$1.apk')
}

tasks.whenTaskAdded { task ->
	//Copy the binary to the final bin folder. Check for signing params as well
	if (task.name == 'packageRelease') {
		task.dependsOn(checkReleaseSigning)
		task.doFirst() { delete fileTree('bin') { include {'*.apk'} exclude {'*-debug.apk'} } }
		task.finalizedBy copyToBinRelease
	}
	if (task.name == 'packageDebug') {
		task.doFirst() { delete fileTree('bin') { include '*-debug.apk'} }
		task.finalizedBy copyToBinDebug
	}
}

allprojects {
	repositories {
		google()
		jcenter()
		mavenCentral()
	}
}